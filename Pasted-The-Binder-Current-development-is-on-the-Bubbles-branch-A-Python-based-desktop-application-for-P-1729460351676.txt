The Binder
Current development is on the 'Bubbles' branch.

A Python-based desktop application for PDF compilation with local file handling and a fun, user-friendly interface.

ðŸŽ¨ Branding
The Binder is represented by our lovable eyeball logo, symbolizing the watchful gaze that keeps your PDFs organized and bound together. Our mascot, Bindy the Eyeball, is always here to guide you through your PDF compilation journey!

Features
PDF Compilation: Combine multiple PDF files into a single document.
Page Selection: Choose specific pages from each PDF to include in the final compilation.
Cover Page Settings: Add custom cover pages to your compiled PDF.
Table of Contents Integration:
While not explicitly implemented as a separate feature, the cover page settings and page selection functionality work together to create a pseudo table of contents.
Users can select specific pages from the first PDF to serve as cover pages or a table of contents.
These pages are then followed by the selected content pages from all PDFs.
Fun Naming: Automatically generate unique, space-themed names for output files.
Report Saving and Loading: Save your compilation settings as reports and load them later.
User-Friendly GUI: Colorful and intuitive interface for easy navigation and use.
Dependencies
The Binder relies on the following Python libraries:

tkinter: Used for creating the graphical user interface.

Installation: Typically comes pre-installed with Python.
PyPDF2: Handles PDF file operations such as merging and page extraction.

Installation: pip install PyPDF2
Pillow (PIL): Used for image processing, particularly for handling the application icon.

Installation: pip install Pillow
json: Used for saving and loading report data.

Installation: Part of Python's standard library, no additional installation required.
threading: Used for running the HTTP server alongside the GUI.

Installation: Part of Python's standard library, no additional installation required.
http.server and socketserver: Used for creating a simple HTTP server.

Installation: Part of Python's standard library, no additional installation required.
Flask: Web framework used for the backend API.

Installation: pip install flask
PyMuPDF (fitz): Used for PDF processing.

Installation: pip install PyMuPDF
Installation
Clone this repository:

git clone https://github.com/your-username/the-binder.git
cd the-binder
Install the required dependencies:

pip install -r requirements.txt
pip install flask PyMuPDF
Note: If you encounter issues with tkinter, you may need to install it separately. On macOS, you can use Homebrew:

brew install python-tk
On Linux, you can use your package manager. For example, on Ubuntu:

sudo apt-get install python3-tk
Usage
Run the application:

python main.py
Using the GUI:

Click "Add PDF" to select PDF files for compilation.
Use "Remove PDF" to remove any unwanted files from the list.
Select an output folder using "Select Output Folder".
Cover Page Settings:

Check the "Use cover pages" box to enable cover page functionality.
Enter the page numbers you want to use as cover pages in the "Cover pages" field (e.g., 1,2,3-5).
The cover pages will be taken from the first PDF in your list.
Compiling PDFs:

Click "Compile PDFs" to start the compilation process.
You'll be prompted to enter the pages you want to include from each PDF.
The Binder will generate a fun, space-themed name for your output file.
Saving and Loading Reports:

Use "Save Report" to save your current compilation settings.
Use "Load Report" to recall previously saved settings.
The Binder's Cosmic Collection:

View the list of PDFs you've added to your compilation project.
This section displays file names and page counts for easy reference.
Note: The table of contents functionality is integrated with the cover page settings and page selection. By carefully selecting cover pages and content pages, you can effectively create a table of contents for your compiled PDF.

Known Issues
The Flask application shows a warning about being a development server, which is expected and not an issue for our current development work.
The Electron app is currently failing to start due to a missing shared library (libxshmfence.so.1).
Unable to select specific PDFs from "The Binder's Cosmic Collection" list to modify page numbers or ranges.
The "Remove PDF" button functionality is inconsistent.
Some features are still not fully implemented, such as actual PDF compilation and file handling.
Need to implement functionality to add a cover page with new page numbers and a cover letter to the final compiled PDF.
Space in file names may cause issues with PDF compilation and handling.
ModuleNotFoundError: No module named 'frontend' when running main.py. This might be due to a missing or incorrectly installed dependency.
ModuleNotFoundError: No module named '_tkinter' when running main.py. This is likely due to tkinter not being installed or properly configured.
On lower-end devices, the animated background and UI effects may cause slight performance issues. The number of particles and animation frequencies have been reduced to mitigate this, but further optimization may be necessary for very low-end devices.
The shiny, reflective surface effect on UI elements may not be visible on devices with lower screen resolutions or older graphics cards.
Current Status
We have successfully implemented the initial prototype with a cyberpunk-inspired GUI using Electron.js and Flask. The interface now features neon colors, glitch effects, and animated elements that align with the desired cyberpunk and zef culture aesthetic. Here's an update on our progress:

Cyberpunk-inspired GUI:

The interface has been redesigned with a dark background, neon colors, and angular UI elements.
Animated background with floating particles has been implemented, creating a futuristic atmosphere.
Eyeball mascots have been updated to look more robotic or cybernetic, fitting the cyberpunk theme.
Animated background and UI elements:

A subtle screen flicker effect has been added to enhance the cyberpunk feel.
Buttons and other UI elements now have glitch effects and neon glow animations.
Shiny, bubbly surfaces have been added to UI elements with subtle animations.
Performance optimization:

Animations and effects have been optimized for better performance on lower-end devices.
The number of particles, animation frequencies, and effect intensities have been adjusted for a balance between visual appeal and performance.
PDF compilation functionality:

Basic backend functionality for PDF compilation has been implemented using PyPDF2.
Frontend integration with the backend for PDF compilation is in progress.
File management:

Users can now add and remove PDF files from the compilation list.
The interface displays both selected and available PDF files.
Cover page and report functionality:

Users can enable cover pages and specify page numbers for cover pages.
Save and load report functionality has been implemented.
The current focus is on further optimizing performance for smoother animations, especially on lower-end devices, and completing the integration of PDF compilation functionality with the frontend.

Next steps include:

Further optimizing the performance of animations and effects for very low-end devices.
Completing the integration of PDF compilation functionality with the frontend.
Implementing file selection for modifying page ranges of specific PDFs.
Enhancing the interactivity of UI elements.
Ensuring cross-platform compatibility.
Implementing the functionality to add a cover page with new page numbers and a cover letter to the final compiled PDF.
Addressing the issue with spaces in file names for PDF compilation and handling.
Future Improvements
Implement better management of report patterns for compilations directly within the application.
Add a low-performance mode for devices that struggle with the current animations and effects.
Implement progressive enhancement for the shiny, reflective surface effects to ensure compatibility with a wider range of devices.
License
This project is licensed under the MIT License - see the LICENSE file for details.